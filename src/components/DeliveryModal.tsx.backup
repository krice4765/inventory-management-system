import React, { useEffect, useState } from 'react'
import { useForm } from 'react-hook-form'
import { useMutation, useQueryClient } from '@tanstack/react-query'
import toast from 'react-hot-toast'

import { useDeliveryModal } from '../stores/deliveryModal.store'
import { useOrderForDelivery } from '../hooks/useOrderForDelivery'
import { supabase } from '../lib/supabase'
import { useOrdersSync } from '../hooks/useOrdersSync'
import { processInventoryFromOrder } from '../utils/inventoryIntegration'
import { JapanesePDFGenerator } from '../utils/japanesePdfGenerator'
import type { DeliveryNotePDFData } from '../types/pdf'
import { DeliveryHistoryList } from './DeliveryHistoryList'

interface DeliveryFormData {
  amount: number
  deliveryType: 'amount_only' | 'amount_and_quantity'
  quantities?: { [productId: string]: number }
  memo?: string
  scheduled_delivery_date?: string
  delivery_reason?: string
}

// Yup schemaを削除し、React Hook Formのネイティブバリデーションを使用

export const DeliveryModal = () => {
  const { isOpen, selectedOrderId, close } = useDeliveryModal()
  const queryClient = useQueryClient()
  const { syncOrderData } = useOrdersSync()
  
  // 分納完了後の状態管理
  const [lastDeliveryResult, setLastDeliveryResult] = useState<{
    success: boolean;
    deliverySequence: number;
    deliveredAmount: number;
    transactionId: string;
  } | null>(null)
  
  const { data: orderData, isLoading, isError, error } = useOrderForDelivery(selectedOrderId)
  
  const form = useForm<DeliveryFormData>({
    defaultValues: { 
      amount: 0, 
      deliveryType: 'amount_only' as const,
      quantities: {},
      memo: '',
      scheduled_delivery_date: '',
      delivery_reason: ''
    },
    mode: 'onChange',
  })

  // 個数完了時の金額自動設定監視
  useEffect(() => {
    const subscription = form.watch((value, { name }) => {
      if (name?.startsWith('quantities.') && orderData?.items) {
        const quantities = value.quantities || {};
        const deliveryType = value.deliveryType;
        
        // 個数指定分納で、入力されたすべての商品が満了の場合
        if (deliveryType === 'amount_and_quantity') {
          // 入力された商品のみをチェック
          const inputItems = orderData.items.filter((item: any) => {
            const inputQuantity = quantities[item.product_id] || 0;
            return inputQuantity > 0;
          });

          // 入力されたすべての商品が満了の場合のみ自動設定
          const allInputItemsComplete = inputItems.length > 0 && inputItems.every((item: any) => {
            const inputQuantity = quantities[item.product_id] || 0;
            const remainingQuantity = item.remaining_quantity || item.quantity;
            return inputQuantity >= remainingQuantity;
          });

          // 入力されたすべての商品が満了の場合、金額を残額に自動設定
          if (allInputItemsComplete) {
            form.setValue('amount', orderData.remaining_amount);
            console.log('🎯 入力商品すべてが満了により金額を残額満了に自動設定:', orderData.remaining_amount);
          }
        }
      }
    });
    return () => subscription.unsubscribe();
  }, [form, orderData]);

  // orderDataが更新されたときにフォームのresolverを更新
  useEffect(() => {
    if (orderData) {
      console.log('📋 分納モーダル データ確認:', {
        発注額: orderData.ordered_amount,
        既納品: orderData.delivered_amount, 
        残額: orderData.remaining_amount,
        発注番号: orderData.order_no,
        商品明細: orderData.items.map(item => ({
          商品名: item.product_name,
          発注数量: item.quantity,
          分納済み: item.delivered_quantity || 0,
          残り数量: item.remaining_quantity || item.quantity
        }))
      });
      
      // フォームエラーをクリアし、バリデーションを再実行
      form.clearErrors();
      
      // 現在の値で再バリデーション実行
      const currentAmount = form.getValues('amount');
      if (currentAmount > 0) {
        form.trigger('amount');
      }
    }
  }, [orderData, form]);

  // 分納処理のMutation
  const deliveryMutation = useMutation({
    mutationFn: async (data: DeliveryFormData) => {
      if (!orderData) throw new Error('発注情報が取得できていません')
      
      // 🛡️ 分納予定日必須チェック
      if (!data.scheduled_delivery_date) {
        throw new Error('分納予定日を設定してください')
      }
      
      // 次のシーケンス番号を取得
      const { data: seqData, error: seqError } = await supabase
        .from('transactions')
        .select('delivery_sequence')
        .eq('parent_order_id', orderData.purchase_order_id)
        .eq('transaction_type', 'purchase')
        .order('delivery_sequence', { ascending: false })
        .limit(1)
        .maybeSingle()
      
      if (seqError) throw seqError
      const nextSequence = (seqData?.delivery_sequence ?? 0) + 1

      // 重複チェック: 同じタイミングでの分納登録を防止
      const now = new Date().toISOString();
      const { data: recentDeliveries } = await supabase
        .from('transactions')
        .select('id, total_amount, created_at')
        .eq('parent_order_id', orderData.purchase_order_id)
        .eq('transaction_type', 'purchase')
        .eq('status', 'confirmed')
        .gte('created_at', new Date(Date.now() - 30000).toISOString()) // 30秒以内の登録をチェック
        .order('created_at', { ascending: false });

      // 同額・同時間の分納が存在する場合はスキップ
      const isDuplicate = recentDeliveries?.some(recent => 
        Math.abs(recent.total_amount - data.amount) < 1 &&
        new Date(recent.created_at).getTime() > Date.now() - 10000 // 10秒以内
      );

      if (isDuplicate) {
        console.warn('🚨 重複分納検出、処理をスキップ');
        throw new Error('同じ分納が既に登録されています');
      }

      // 分納記録を挿入
      const transactionId = crypto.randomUUID();
      console.log('💾 新規分納登録:', {
        transactionId,
        amount: data.amount,
        sequence: nextSequence,
        orderId: orderData.purchase_order_id
      });

      // 分納情報の詳細なメモを構築
      let detailedMemo = data.deliveryType === 'amount_and_quantity' 
        ? `分納入力 - ${orderData.order_no} (${nextSequence}回目) [個数指定]` 
        : `分納入力 - ${orderData.order_no} (${nextSequence}回目)`;
      
      if (data.delivery_reason) {
        const reasonLabels: { [key: string]: string } = {
          'partial_ready': '一部完成のため',
          'inventory_limit': '在庫制約のため',
          'customer_request': '顧客要望のため',
          'quality_check': '品質確認のため',
          'production_delay': '製造遅延のため',
          'shipping_arrangement': '出荷調整のため',
          'cash_flow': 'キャッシュフロー調整',
          'other': 'その他'
        };
        detailedMemo += ` | 理由: ${reasonLabels[data.delivery_reason] || data.delivery_reason}`;
      }
      
      if (data.memo) {
        detailedMemo += ` | ${data.memo}`;
      }

      const { error: insertError } = await supabase
        .from('transactions')
        .insert({
          id: transactionId,
          transaction_type: 'purchase',
          status: 'confirmed',
          partner_id: orderData.partner_id,
          total_amount: data.amount,
          parent_order_id: orderData.purchase_order_id,
          delivery_sequence: nextSequence,
          transaction_date: data.scheduled_delivery_date || new Date().toISOString().split('T')[0],
          memo: detailedMemo,
          created_at: now,
        })
      
      if (insertError) throw insertError
      
      // 🔄 分納完了時の在庫連動処理
      return { 
        deliveredAmount: data.amount, 
        memo: data.memo,
        deliveryType: data.deliveryType,
        quantities: data.quantities,
        transactionId: transactionId,
        deliverySequence: nextSequence
      };
    },
    onSuccess: async (result) => {
      const { deliveredAmount, memo, deliveryType, quantities, transactionId, deliverySequence } = result;
      try {
        // 🔄 在庫連動処理を実行
        if (orderData && selectedOrderId) {
          console.log('🔄 在庫連動処理開始:', {
            orderId: selectedOrderId,
            deliveredAmount,
            memo: memo || `分納入力 - ${orderData.order_no}`
          });

          const inventoryResult = await processInventoryFromOrder(
            selectedOrderId,
            deliveredAmount,
            memo || `分納入力 - ${orderData.order_no}`,
            deliveryType,
            quantities,
            transactionId,
            deliverySequence
          );

          if (!inventoryResult.success) {
            console.warn('⚠️ 在庫連動処理エラー:', inventoryResult.error);
            toast.error(`分納は登録されましたが、在庫更新に失敗しました: ${inventoryResult.error}`);
          } else {
            console.log('✅ 在庫連動処理成功');
          }
        }

        // キャッシュを強制的にクリアし、即座に最新データを取得
        await Promise.all([
          queryClient.invalidateQueries({ queryKey: ['orders'] }),
          queryClient.invalidateQueries({ queryKey: ['delivery-order', selectedOrderId] }),
          queryClient.invalidateQueries({ queryKey: ['dashboard-stats'] }),
          queryClient.invalidateQueries({ queryKey: ['delivery-progress'] }),
        ]);
        
        // 強制的にOrdersクエリを再実行
        await queryClient.refetchQueries({ queryKey: ['orders'] });
        
        // 分納完了情報を保存（PDF生成用）
        setLastDeliveryResult({
          success: true,
          deliverySequence: deliverySequence,
          deliveredAmount: deliveredAmount,
          transactionId: transactionId
        });

        // useOrdersSync が正常に動作する場合
        if (syncOrderData && typeof syncOrderData === 'function') {
          await syncOrderData('分納を登録し、在庫を更新しました');
        } else {
          toast.success('分納を登録しました');
        }
        form.reset();
      } catch (error) {
        console.error('データ同期エラー:', error);
        // 登録は成功しているので、同期エラーでもUIは更新
        await queryClient.invalidateQueries({ queryKey: ['orders'] });
        toast.success('分納を登録しました（データ同期は手動更新してください）');
        form.reset();
      }
    },
    onError: (error: Error) => {
      toast.error(`登録に失敗しました: ${error?.message ?? '不明なエラー'}`)
    }
  })

  // 納品書PDF生成機能
  const generateDeliveryNotePDF = async () => {
    if (!orderData || !lastDeliveryResult) {
      toast.error('納品書生成に必要なデータがありません');
      return;
    }

    try {
      // 分納データから納品書データを構築
      const deliveryNoteData: DeliveryNotePDFData = {
        id: lastDeliveryResult.transactionId,
        delivery_no: `DEL-${orderData.order_no}-${lastDeliveryResult.deliverySequence}`,
        delivery_date: new Date().toISOString().split('T')[0],
        order_no: orderData.order_no,
        partner_name: orderData.partner_name,
        delivery_sequence: lastDeliveryResult.deliverySequence,
        total_amount: lastDeliveryResult.deliveredAmount,
        notes: form.getValues('memo') || '分納による納品',
        items: orderData.items.map(item => ({
          product_name: item.product_name,
          product_code: item.product_code || '',
          drawing_number: item.drawing_number,
          delivered_quantity: item.quantity, // 簡略化: 実際には分納数量を計算
          unit_price: item.unit_price,
          total_amount: item.quantity * item.unit_price
        }))
      };

      console.log('🎨 納品書PDF生成開始:', deliveryNoteData);

      const result = await JapanesePDFGenerator.generateDeliveryNotePDF(deliveryNoteData);
      
      if (result.success && result.pdfBlob && result.filename) {
        JapanesePDFGenerator.downloadPDF(result.pdfBlob, result.filename);
        toast.success('納品書PDFを生成しました');
      } else {
        throw new Error(result.error || '納品書PDF生成に失敗');
      }
    } catch (error) {
      console.error('納品書PDF生成エラー:', error);
      toast.error(`納品書PDF生成に失敗しました: ${error instanceof Error ? error.message : '不明なエラー'}`);
    }
  };

  // クイック金額設定
  const setQuickAmount = (percentage: number) => {
    if (!orderData) return
    const amount = Math.floor(orderData.remaining_amount * percentage)
    form.setValue('amount', amount, { shouldValidate: true })
  }

  // モーダルを閉じる際の処理
  const handleClose = () => {
    setLastDeliveryResult(null);
    close();
  };

  if (!isOpen) return null

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-xl shadow-2xl w-full max-w-2xl max-h-[95vh] overflow-y-auto">
        <div className="sticky top-0 bg-white rounded-t-xl border-b border-gray-200 px-6 py-4 z-10">
          <div className="flex justify-between items-center">
            <div className="flex items-center space-x-3">
              <div className="p-2 bg-gradient-to-r from-blue-500 to-purple-600 rounded-lg">
                <span className="text-white text-lg">📦</span>
              </div>
              <div>
                <h3 className="text-xl font-bold text-gray-900">分納入力</h3>
                <p className="text-sm text-gray-600">商品の分納処理を行います</p>
              </div>
            </div>
            <button 
              onClick={handleClose}
              className="p-2 hover:bg-gray-100 rounded-full transition-colors text-gray-400 hover:text-gray-600"
            >
              <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>
        </div>
        
        <div className="px-6 pb-6">
          {isLoading && (
            <div className="text-center py-8">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto"></div>
              <p className="mt-2 text-gray-600">発注情報を読み込み中...</p>
            </div>
          )}
          
          {isError && (
            <div className="p-3 bg-red-50 text-red-700 rounded mb-4">
              発注情報の取得に失敗しました: {error?.message ?? '不明なエラー'}
            </div>
          )}
          
          {orderData && (
            <form onSubmit={form.handleSubmit((data) => deliveryMutation.mutate(data))}>
              {/* 発注情報表示 */}
              <div className="bg-blue-50 rounded-lg p-4 mb-6">
              <h4 className="font-semibold text-blue-900 mb-2">
                {orderData.order_no}
              </h4>
              <div className="grid grid-cols-2 gap-3 text-sm">
                <div>
                  <span className="text-blue-700">仕入先:</span>
                  <p className="font-medium">{orderData.partner_name}</p>
                </div>
                <div>
                  <span className="text-blue-700">発注額:</span>
                  <p className="font-medium">¥{orderData.ordered_amount.toLocaleString()}</p>
                </div>
                <div>
                  <span className="text-blue-700">既納品:</span>
                  <p className="font-medium">¥{orderData.delivered_amount.toLocaleString()}</p>
                </div>
                <div>
                  <span className="text-blue-700 font-semibold">残額:</span>
                  <p className="font-bold text-lg">¥{orderData.remaining_amount.toLocaleString()}</p>
                </div>
              </div>
            </div>

            {/* 分納履歴表示 */}
            {orderData.delivered_amount > 0 && (
              <div className="mb-6">
                <div className="bg-gray-50 rounded-lg p-4">
                  <h4 className="font-semibold text-gray-900 mb-3 flex items-center">
                    📋 分納履歴
                    <span className="ml-2 text-sm text-gray-600">
                      （既納品: ¥{orderData.delivered_amount.toLocaleString()}）
                    </span>
                  </h4>
                  <DeliveryHistoryList orderId={selectedOrderId} />
                </div>
              </div>
            )}

            {/* クイック入力ボタン */}
            <div className="mb-6">
              <label className="block text-sm font-medium text-gray-700 mb-3">
                クイック入力
              </label>
              <div className="grid grid-cols-4 gap-2">
                <button
                  type="button"
                  onClick={() => setQuickAmount(0.25)}
                  className="p-2 text-xs bg-blue-100 text-blue-700 rounded hover:bg-blue-200 transition-colors"
                >
                  25%<br/>¥{Math.floor(orderData.remaining_amount * 0.25).toLocaleString()}
                </button>
                <button
                  type="button"
                  onClick={() => setQuickAmount(0.4)}
                  className="p-2 text-xs bg-green-100 text-green-700 rounded hover:bg-green-200 transition-colors"
                >
                  40%<br/>¥{Math.floor(orderData.remaining_amount * 0.4).toLocaleString()}
                </button>
                <button
                  type="button"
                  onClick={() => setQuickAmount(0.6)}
                  className="p-2 text-xs bg-yellow-100 text-yellow-700 rounded hover:bg-yellow-200 transition-colors"
                >
                  60%<br/>¥{Math.floor(orderData.remaining_amount * 0.6).toLocaleString()}
                </button>
                <button
                  type="button"
                  onClick={() => setQuickAmount(1.0)}
                  className="p-2 text-xs bg-red-100 text-red-700 rounded hover:bg-red-200 transition-colors"
                >
                  全額<br/>¥{orderData.remaining_amount.toLocaleString()}
                </button>
              </div>
            </div>

            {/* 納品金額入力 */}
            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-700 mb-2">
                納品金額 <span className="text-red-500">*</span>
              </label>
              <input
                type="number"
                step="1"
                disabled={(() => {
                  const deliveryType = form.watch('deliveryType');
                  if (deliveryType === 'amount_and_quantity' && orderData?.items) {
                    const quantities = form.watch('quantities') || {};
                    return orderData.items.every((item: any) => {
                      const inputQuantity = quantities[item.product_id] || 0;
                      const remainingQuantity = item.remaining_quantity || item.quantity;
                      return remainingQuantity === 0 || inputQuantity >= remainingQuantity;
                    });
                  }
                  return false;
                })()}
                {...form.register('amount', { 
                  valueAsNumber: true,
                  required: '納品金額は必須です',
                  min: { value: 1, message: '0より大きい値を入力してください' },
                  validate: (value) => {
                    if (!orderData) return true;
                    if (value > orderData.remaining_amount) {
                      return `残額¥${orderData.remaining_amount.toLocaleString()}を超えています`;
                    }

                    // 個数指定分納の場合の整合性チェック
                    const deliveryType = form.watch('deliveryType');
                    if (deliveryType === 'amount_and_quantity' && orderData.items) {
                      const quantities = form.watch('quantities') || {};
                      
                      // 入力された商品と、すべてが満了かチェック
                      const inputItems = orderData.items.filter((item: any) => {
                        const inputQuantity = quantities[item.product_id] || 0;
                        return inputQuantity > 0;
                      });
                      
                      // 入力されたすべての商品が満了の場合のみ、金額も満額要求
                      const allInputItemsAreFull = inputItems.length > 0 && inputItems.every((item: any) => {
                        const inputQuantity = quantities[item.product_id] || 0;
                        const remainingQuantity = item.remaining_quantity || item.quantity;
                        return inputQuantity >= remainingQuantity;
                      });

                      // すべての入力商品が満了なのに金額が未満了の場合のみエラー
                      if (allInputItemsAreFull && value < orderData.remaining_amount) {
                        const tolerance = 10; // 10円の許容誤差
                        if (orderData.remaining_amount - value > tolerance) {
                          return `すべての入力商品が満了のため、金額も残額満了（¥${orderData.remaining_amount.toLocaleString()}）である必要があります`;
                        }
                      }
                    }

                    return true;
                  }
                })}
                className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                  form.formState.errors.amount ? 'border-red-300' : 'border-gray-300'
                } ${(() => {
                  const deliveryType = form.watch('deliveryType');
                  if (deliveryType === 'amount_and_quantity' && orderData?.items) {
                    const quantities = form.watch('quantities') || {};
                    const isDisabled = orderData.items.every((item: any) => {
                      const inputQuantity = quantities[item.product_id] || 0;
                      const remainingQuantity = item.remaining_quantity || item.quantity;
                      return remainingQuantity === 0 || inputQuantity >= remainingQuantity;
                    });
                    return isDisabled ? 'bg-gray-100 text-gray-500 cursor-not-allowed' : '';
                  }
                  return '';
                })()}`}
                placeholder="0"
              />
              {form.formState.errors.amount && (
                <p className="mt-1 text-sm text-red-600">
                  {form.formState.errors.amount.message}
                </p>
              )}
              {(() => {
                const deliveryType = form.watch('deliveryType');
                if (deliveryType === 'amount_and_quantity' && orderData?.items) {
                  const quantities = form.watch('quantities') || {};
                  const isDisabled = orderData.items.every((item: any) => {
                    const inputQuantity = quantities[item.product_id] || 0;
                    const remainingQuantity = item.remaining_quantity || item.quantity;
                    return remainingQuantity === 0 || inputQuantity >= remainingQuantity;
                  });
                  if (isDisabled) {
                    return (
                      <p className="mt-1 text-sm text-green-600 bg-green-50 p-2 rounded">
                        ✅ すべての入力商品が満了のため、金額は残額満了（¥{orderData.remaining_amount.toLocaleString()}）に自動設定されました
                      </p>
                    );
                  }
                }
                return null;
              })()}
            </div>

            {/* 分納タイプ選択 */}
            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-700 mb-2">
                分納タイプ
              </label>
              <div className="space-y-2">
                <label className="inline-flex items-center">
                  <input
                    type="radio"
                    {...form.register('deliveryType')}
                    value="amount_only"
                    className="form-radio h-4 w-4 text-blue-600"
                  />
                  <span className="ml-2 text-sm text-gray-700">
                    金額のみで分納（発注数量の100%を自動入庫）
                  </span>
                </label>
                <label className="inline-flex items-center">
                  <input
                    type="radio"
                    {...form.register('deliveryType')}
                    value="amount_and_quantity"
                    className="form-radio h-4 w-4 text-blue-600"
                  />
                  <span className="ml-2 text-sm text-gray-700">
                    金額＋個数を指定して分納
                  </span>
                </label>
              </div>
            </div>

            {/* 個数指定セクション */}
            {form.watch('deliveryType') === 'amount_and_quantity' && orderData.items && (
              <div className="mb-4 border border-blue-200 rounded-lg p-4 bg-blue-50">
                <h4 className="font-medium text-blue-900 mb-3">個数指定</h4>
                <div className="space-y-3">
                  {orderData.items.map((item: any) => (
                    <div key={item.product_id} className="flex items-center justify-between">
                      <div className="flex-1">
                        <div className="font-medium text-gray-900 flex items-center">
                          {item.product_name}
                          {item.remaining_quantity === 0 && (
                            <span className="ml-2 px-2 py-1 bg-green-100 text-green-800 text-xs rounded-full font-medium">
                              ✅ 完了
                            </span>
                          )}
                        </div>
                        <div className="text-sm text-gray-600 bg-gray-50 px-2 py-1 rounded">
                          <span className="font-medium">{item.product_code}</span> | 発注: <span className="font-semibold">{item.quantity}</span> | 分納済み: <span className="text-green-600 font-semibold">{item.delivered_quantity || 0}</span> | {item.remaining_quantity === 0 ? (
                            <span className="text-green-600 font-bold bg-green-100 px-2 py-0.5 rounded-full text-xs">✅ 完了</span>
                          ) : (
                            <span className="text-blue-600 font-bold bg-blue-100 px-2 py-0.5 rounded-full text-sm">🔢 残り: {item.remaining_quantity || item.quantity}個</span>
                          )}
                        </div>
                        {/* 在庫状況表示 */}
                        {item.current_stock !== undefined && (
                          <div className="text-xs mt-1">
                            <span className={`px-2 py-0.5 rounded-full font-medium ${
                              item.stock_status === 'sufficient' 
                                ? 'bg-green-100 text-green-800' 
                                : item.stock_status === 'insufficient'
                                ? 'bg-yellow-100 text-yellow-800'
                                : 'bg-red-100 text-red-800'
                            }`}>
                              📦 在庫: {item.current_stock}個
                              {item.stock_status === 'insufficient' && (
                                <span className="ml-1 text-red-600">⚠️ 不足{item.stock_shortage}個</span>
                              )}
                              {item.stock_status === 'out_of_stock' && (
                                <span className="ml-1 text-red-600">❌ 在庫切れ</span>
                              )}
                            </span>
                          </div>
                        )}
                      </div>
                      <div className="w-24">
                        <input
                          type="number"
                          min="0"
                          max={Math.min(item.remaining_quantity || item.quantity, item.current_stock || 0)}
                          placeholder="0"
                          className={`w-full px-2 py-1 border rounded text-sm ${
                            item.stock_status === 'out_of_stock' 
                              ? 'border-red-300 bg-red-50 cursor-not-allowed' 
                              : item.stock_status === 'insufficient'
                              ? 'border-yellow-300 bg-yellow-50'
                              : 'border-gray-300'
                          }`}
                          disabled={item.stock_status === 'out_of_stock'}
                          title={item.stock_status === 'out_of_stock' ? '在庫切れのため入力不可' : ''}
                          {...form.register(`quantities.${item.product_id}`, { 
                            valueAsNumber: true,
                            min: { value: 0, message: '0以上の値を入力してください' },
                            validate: (value) => {
                              if (!value || value === 0) return true;
                              const maxQuantity = item.remaining_quantity || item.quantity;
                              const currentStock = item.current_stock || 0;
                              
                              if (value > maxQuantity) {
                                return `残り数量${maxQuantity}を超えています`;
                              }
                              
                              // 在庫不足チェック
                              if (value > currentStock) {
                                return `在庫不足: 現在在庫${currentStock}個（不足${value - currentStock}個）`;
                              }

                              // 金額と個数の整合性チェック（緩和版）
                              const enteredAmount = form.watch('amount') || 0;
                              const remainingAmount = orderData?.remaining_amount || 0;
                              const tolerance = 10; // 10円の許容誤差
                              const quantities = form.watch('quantities') || {};

                              // 金額が満了で、かつ入力されたすべての商品が満了の場合のみチェック
                              if (remainingAmount - enteredAmount <= tolerance && enteredAmount > 0) {
                                const inputItems = orderData?.items?.filter((item: any) => {
                                  const inputQuantity = quantities[item.product_id] || 0;
                                  return inputQuantity > 0;
                                }) || [];
                                
                                const allOtherItemsAreFull = inputItems.filter((otherItem: any) => 
                                  otherItem.product_id !== item.product_id
                                ).every((otherItem: any) => {
                                  const otherInputQuantity = quantities[otherItem.product_id] || 0;
                                  const otherRemainingQuantity = otherItem.remaining_quantity || otherItem.quantity;
                                  return otherInputQuantity >= otherRemainingQuantity;
                                });
                                
                                // 他のすべての商品が満了で、この商品も満了でない場合のみエラー
                                if (allOtherItemsAreFull && inputItems.length > 1 && value < maxQuantity) {
                                  return `金額が残額満了で他商品も満了のため、この商品も満了（${maxQuantity}）である必要があります`;
                                }
                              }

                              return true;
                            }
                          })}
                        />
                      </div>
                    </div>
                  ))}
                </div>
                <div className="mt-2 text-xs text-blue-600">
                  ※ 各商品の入庫数量を指定してください（0の場合は入庫されません）
                </div>
                <div className="mt-1 text-xs text-orange-600 bg-orange-50 p-2 rounded">
                  ⚠️ <strong>重要:</strong> 満了商品がある場合、その商品は分納対象から除外されます。未満了商品のみでも分納登録が可能です
                </div>
                {/* 在庫不足商品がある場合の警告 */}
                {orderData.items?.some((item: any) => item.stock_status === 'insufficient' || item.stock_status === 'out_of_stock') && (
                  <div className="mt-2 text-xs text-red-600 bg-red-50 p-2 rounded border border-red-200">
                    🚨 <strong>在庫不足警告:</strong> 一部商品で在庫が不足しています。分納数量は現在在庫を超えて指定できません。
                    {orderData.items
                      ?.filter((item: any) => item.stock_status === 'insufficient' || item.stock_status === 'out_of_stock')
                      .map((item: any) => (
                        <div key={item.product_id} className="mt-1 text-xs">
                          • {item.product_name}: 
                          {item.stock_status === 'out_of_stock' ? ' 在庫切れ' : ` 在庫${item.current_stock}個（不足${item.stock_shortage}個）`}
                        </div>
                      ))
                    }
                  </div>
                )}
              </div>
            )}

            {/* 納期情報と分納予定日 */}
            <div className="mb-4">
              <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-4">
                <h4 className="font-semibold text-blue-900 mb-2 flex items-center">
                  📋 納期情報
                </h4>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                  <div>
                    <span className="font-medium text-gray-700">発注書の納期:</span>
                    <p className="text-blue-700 font-semibold">
                      {orderData.delivery_deadline ? new Date(orderData.delivery_deadline).toLocaleDateString('ja-JP') : '設定なし'}
                    </p>
                  </div>
                  <div>
                    <span className="font-medium text-gray-700">ステータス:</span>
                    <p className={`font-semibold ${
                      new Date(orderData.delivery_deadline || '') > new Date() 
                        ? 'text-green-700' 
                        : 'text-red-700'
                    }`}>
                      {new Date(orderData.delivery_deadline || '') > new Date() ? '✅ 期限内' : '⚠️ 期限超過'}
                    </p>
                  </div>
                </div>
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {/* 分納予定日 */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    📅 この分納の予定日 <span className="text-red-500">*</span>
                  </label>
                  <input
                    type="date"
                    {...form.register('scheduled_delivery_date', { required: '分納予定日を設定してください' })}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    min={new Date().toISOString().split('T')[0]} // 今日以降のみ選択可能
                    required
                  />
                  <p className="mt-1 text-xs text-gray-500">
                    💡 発注書の納期と異なる日付を設定可能です
                  </p>
                  {form.watch('scheduled_delivery_date') && orderData.delivery_deadline && (
                    <div className="mt-2 text-xs">
                      {(() => {
                        const deliveryDate = new Date(form.watch('scheduled_delivery_date'));
                        const orderDeadline = new Date(orderData.delivery_deadline);
                        const isEarlier = deliveryDate < orderDeadline;
                        const isLater = deliveryDate > orderDeadline;
                        
                        if (isEarlier) {
                          return (
                            <div className="flex items-center space-x-1 text-green-600">
                              <span>✅</span>
                              <span>発注納期より早い予定です</span>
                            </div>
                          );
                        } else if (isLater) {
                          return (
                            <div className="flex items-center space-x-1 text-orange-600">
                              <span>⚠️</span>
                              <span>発注納期より遅い予定です</span>
                            </div>
                          );
                        } else {
                          return (
                            <div className="flex items-center space-x-1 text-blue-600">
                              <span>📅</span>
                              <span>発注納期と同じ日です</span>
                            </div>
                          );
                        }
                      })()}
                    </div>
                  )}
                </div>

              {/* 分納理由 */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  📝 分納理由
                </label>
                <select
                  {...form.register('delivery_reason')}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  <option value="">理由を選択（任意）</option>
                  <option value="partial_ready">一部完成のため</option>
                  <option value="inventory_limit">在庫制約のため</option>
                  <option value="customer_request">顧客要望のため</option>
                  <option value="quality_check">品質確認のため</option>
                  <option value="production_delay">製造遅延のため</option>
                  <option value="shipping_arrangement">出荷調整のため</option>
                  <option value="cash_flow">キャッシュフロー調整</option>
                  <option value="other">その他</option>
                </select>
              </div>
            </div>

            {/* 備考入力 */}
            <div className="mb-6">
              <label className="block text-sm font-medium text-gray-700 mb-2">
                備考
              </label>
              <textarea
                rows={3}
                {...form.register('memo', { 
                  maxLength: { value: 200, message: '備考は200文字以内で入力してください' } 
                })}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="備考を入力..."
              />
              {form.formState.errors.memo && (
                <p className="mt-1 text-sm text-red-600">
                  {form.formState.errors.memo.message}
                </p>
              )}
            </div>

            {/* 分納完了後のPDF生成ボタン */}
            {lastDeliveryResult && (
              <div className="mb-4 p-4 bg-green-50 border border-green-200 rounded-lg">
                <div className="flex items-center justify-between">
                  <div className="text-green-800">
                    <h4 className="font-medium">✅ 分納登録完了</h4>
                    <p className="text-sm">
                      第{lastDeliveryResult.deliverySequence}回目分納（¥{lastDeliveryResult.deliveredAmount.toLocaleString()}）
                    </p>
                  </div>
                  <button
                    type="button"
                    onClick={generateDeliveryNotePDF}
                    className="px-3 py-2 bg-green-600 text-white text-sm rounded-md hover:bg-green-700 transition-colors"
                  >
                    📄 納品書PDF
                  </button>
                </div>
              </div>
            )}

              {/* アクションボタン */}
              <div className="flex justify-end space-x-3">
                <button
                  type="button"
                  onClick={handleClose}
                  className="px-4 py-2 text-gray-700 border border-gray-300 rounded-md hover:bg-gray-50 transition-colors"
                >
                  {lastDeliveryResult ? '閉じる' : 'キャンセル'}
                </button>
                {!lastDeliveryResult && (
                  <button
                    type="submit"
                    disabled={deliveryMutation.isPending || !form.formState.isValid}
                    className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                  >
                    {deliveryMutation.isPending ? (
                      <span className="flex items-center">
                        <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                        登録中...
                      </span>
                    ) : (
                      '分納登録'
                    )}
                  </button>
                )}
              </div>
            </form>
          )}
          
          {!isLoading && !isError && !orderData && (
            <div className="text-center py-8 text-gray-500">
              発注情報が見つかりません
            </div>
          )}
        </div>
      </div>
    </div>
  )
}